**CONTEXT**
Answer like a software engineer.
I have the Typescript code below and want you to create an E2E test case for it using Cypress syntax. The answer must be ONLY code, you donâ€™t need to explain it.

**CODE EXPLANATION**
Following we have two react components. Sign In is responsible for logging into the system.  Home is responsible for showing the books. They can be accessed at http://localhost:5173/signin.

**CODE** 
*SIGN IN*
import React, { useState, ChangeEvent, useContext } from 'react';
import { useNavigate } from "react-router-dom";

import AppBar from '@mui/material/AppBar';
import Toolbar from '@mui/material/Toolbar';
import IconButton from '@mui/material/IconButton';
import Avatar from '@mui/material/Avatar';
import Button from '@mui/material/Button';
import CssBaseline from '@mui/material/CssBaseline';
import TextField from '@mui/material/TextField';
import Link from '@mui/material/Link';
import Grid from '@mui/material/Grid';
import Box from '@mui/material/Box';
import LockOutlinedIcon from '@mui/icons-material/LockOutlined';
import Typography from '@mui/material/Typography';
import Container from '@mui/material/Container';
import Alert from '@mui/material/Alert';

import { AuthContext } from "../../contexts/Auth/AuthContext";

export const SignIn: React.FC = () => {
    const auth = useContext(AuthContext);
    const navigate = useNavigate();

    const [isSignInError, setActiveErrorMessage] = React.useState(false);
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');

    const handleUsernameInput = (event: ChangeEvent<HTMLInputElement>) => {
        setUsername(event.target.value);
    };

    const handlePasswordInput = (event: ChangeEvent<HTMLInputElement>) => {
        setPassword(event.target.value);
    };

    const handleSubmit = async () => {
        if (username && password) {
            const isLogged = await auth.signin(username, password);
            if (!isLogged) {
                console.log('Wrong login');
                setActiveErrorMessage(true);
            } else {
                console.log('Client logged in');
                setActiveErrorMessage(false);
                navigate('/');
            }
        }
    };

    return (
        <>
            <Box sx={{ flexGrow: 1 }}>
                <AppBar position="static">
                    <Toolbar>
                        <IconButton
                            size="large"
                            edge="start"
                            color="inherit"
                            sx={{ mr: 2 }}
                            href="/"
                        >
                            <Typography variant="h6" component="div" sx={{ flexGrow: 1, ml: 2 }}>
                                Arch Bookstore
                            </Typography>
                        </IconButton>
                    </Toolbar>
                </AppBar>
            </Box>
            <Container component="main" maxWidth="xs">
                <CssBaseline />
                <Box
                    sx={{
                        marginTop: 8,
                        display: 'flex',
                        flexDirection: 'column',
                        alignItems: 'center',
                    }}
                >
                    <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>
                        <LockOutlinedIcon />
                    </Avatar>
                    <Typography component="h1" variant="h5">
                        Sign In
                    </Typography>
                    <Box component="form" onSubmit={handleSubmit} noValidate sx={{
                        alignItems: 'center'
                    }}>
                        <TextField
                            label="Username *"
                            value={username}
                            onChange={handleUsernameInput}
                            margin="normal"
                            id="username"
                            name="username"
                            fullWidth
                        />
                        <TextField
                            label="Password *"
                            type="password"
                            name="password"
                            id="password"
                            value={password}
                            onChange={handlePasswordInput}
                            margin="normal"
                            fullWidth
                        />
                        <>
                            {
                                isSignInError ? (
                                    <Container component="main" maxWidth="xs">
                                        <Alert variant="filled" severity="error">
                                            Wrong username or password!
                                        </Alert>
                                    </Container>) :
                                    <></>
                            }
                        </>
                        <Button
                            variant="contained"
                            color="primary"
                            onClick={handleSubmit}
                            fullWidth
                            name="submit"
                            id="submit"
                            sx={{ mt: 3, mb: 2 }}>
                            Sign In
                        </Button>
                        <Grid container>
                            <Grid item>
                                <Link href="/signup" variant="body2">
                                    {"Don't have an account? Sign Up"}
                                </Link>
                            </Grid>
                        </Grid>
                    </Box>
                </Box>
            </Container>
        </>
    );
};

*ITEM*
import Button from '@mui/material/Button';
// Types
import { CartItemType } from '../Home/Home';
// Context
import { RequireAuth } from '../../contexts/Auth/RequireAuth';
// Styles
import { Wrapper } from './Item.styles';

type Props = {
  item: CartItemType;
  handleAddToCart: (clickedItem: CartItemType) => void;
};

const Item: React.FC<Props> = ({ item, handleAddToCart }) => (
  <Wrapper>
    <div className='card'>
      <img src={item.image} alt={item.title} />
      <div className='item'>
        <h3>{item.title}</h3>
        <h4>{item.author}</h4>
        <p>{item.synopsis}</p>
        <h3>R$ {item.price.toFixed(2)}</h3>
      </div>
      <RequireAuth>
        <Button onClick={() => handleAddToCart(item)}>Add to cart</Button>
      </RequireAuth>
    </div>
  </Wrapper>
);

export default Item;

*HOME*
import { useState, useContext } from "react";
import { useQuery } from 'react-query';
// Components MUI
import Drawer from '@mui/material/Drawer';
import LinearProgress from '@mui/material/LinearProgress';
import Grid from '@mui/material/Grid';
import ShoppingCart from '@mui/icons-material/ShoppingCart';
import Badge from '@mui/material/Badge';
import AppBar from '@mui/material/AppBar';
import Box from '@mui/material/Box';
import Toolbar from '@mui/material/Toolbar';
import Typography from '@mui/material/Typography';
import IconButton from '@mui/material/IconButton';
// Components
import Item from '../Item/Item';
import Cart from '../Cart/Cart'
// Context
import { RequireAuth } from '../../contexts/Auth/RequireAuth';
import { AuthContext } from "../../contexts/Auth/AuthContext";
// Styles
import { Wrapper, StyledButton, StyledButtonNav, StyledButtonNavRed, ButtonContainer } from './Home.styles';

// Types
export type CartItemType = {
    id: number,
    title: string,
    author: string,
    synopsis: string,
    category: string,
    image: string;
    price: number,
    amount: number;
};

const getProducts = async (): Promise<CartItemType[]> =>
    await (await fetch('http://localhost:8080/book/')).json();

export function Home() {
    const [cartOpen, setCartOpen] = useState(false);
    const [cartItems, setCartItems] = useState([] as CartItemType[]);
    const { data, isLoading, error } = useQuery<CartItemType[]>(
        'products',
        getProducts
    );
    const { user, signout } = useContext(AuthContext);
    console.log(data);

    const getTotalItems = (items: CartItemType[]) =>
        items.reduce((ack: number, item) => ack + item.amount, 0);

    const handleAddToCart = (clickedItem: CartItemType) => {
        setCartItems(prev => {
            // 1. Is the item already added in the cart?
            const isItemInCart = prev.find(item => item.id === clickedItem.id);

            if (isItemInCart) {
                return prev.map(item =>
                    item.id === clickedItem.id
                        ? { ...item, amount: item.amount + 1 }
                        : item
                );
            }
            // First time the item is added
            return [...prev, { ...clickedItem, amount: 1 }];
        });
    };

    const handleRemoveFromCart = (id: number) => {
        setCartItems(prev =>
            prev.reduce((ack, item) => {
                if (item.id === id) {
                    if (item.amount === 1) return ack;
                    return [...ack, { ...item, amount: item.amount - 1 }];
                } else {
                    return [...ack, item];
                }
            }, [] as CartItemType[])
        );
    };

    if (isLoading) return <LinearProgress />;
    if (error) return <div>Something went wrong ...</div>;

    return (
        <>
            <Box sx={{ flexGrow: 1 }}>
                <AppBar position="static">
                    <Toolbar>
                        <IconButton
                            size="large"
                            edge="start"
                            color="inherit"
                            sx={{ mr: 2 }}
                            href="/"
                        >
                            <Typography variant="h6" component="div" sx={{ flexGrow: 1, ml: 2 }}>
                                Arch Bookstore
                            </Typography>
                        </IconButton>
                        <ButtonContainer>
                            {user ? (
                                <StyledButtonNavRed onClick={signout}>LOGOUT</StyledButtonNavRed>
                            ) : (
                                <>
                                    <StyledButtonNav href="/signin">SIGN IN</StyledButtonNav>
                                    <StyledButtonNav href="/signup">SIGN UP</StyledButtonNav>
                                </>
                            )}
                        </ButtonContainer>
                    </Toolbar>
                </AppBar>
            </Box>
            <Wrapper>
                <Drawer anchor='right' open={cartOpen} onClose={() => setCartOpen(false)}>
                    <Cart
                        cartItems={cartItems}
                        addToCart={handleAddToCart}
                        removeFromCart={handleRemoveFromCart}
                    />
                </Drawer>
                <RequireAuth>
                    <StyledButton onClick={() => setCartOpen(true)}>
                        <Badge badgeContent={getTotalItems(cartItems)} color='error'>
                            <ShoppingCart className="cart-icon" />
                        </Badge>
                    </StyledButton>
                </RequireAuth>
                <Grid container spacing={3}>
                    {data?.map(item => (
                        <Grid item key={item.id} xs={12} sm={4}>
                            <Item item={item} handleAddToCart={handleAddToCart} />
                        </Grid>
                    ))}
                </Grid>
            </Wrapper>
        </>
    );
};
*Cart*
import CartItem from '../CartItem/CartItem';
import { Wrapper } from './Cart.styles';
import { CartItemType } from '../Home/Home';

type Props = {
  cartItems: CartItemType[];
  addToCart: (clickedItem: CartItemType) => void;
  removeFromCart: (id: number) => void;
};

const Cart: React.FC<Props> = ({ cartItems, addToCart, removeFromCart }) => {
  const calculateTotal = (items: CartItemType[]) =>
    items.reduce((ack: number, item) => ack + item.amount * item.price, 0);

  return (
    <Wrapper>
      <h2>Shopping Cart</h2>
      {cartItems.length === 0 ? <p>No items in cart.</p> : null}
      {cartItems.map(item => (
        <CartItem
          key={item.id}
          item={item}
          addToCart={addToCart}
          removeFromCart={removeFromCart}
        />
      ))}
      <h2>Total: R${calculateTotal(cartItems).toFixed(2)}</h2>
    </Wrapper>
  );
};

export default Cart;


**TEST CASE REQUEST**
I want you to create a test in Cypress syntax for the following use case:
As a user, I want to log into the system and add the book â€˜Engenharia de Software Modernaâ€™ to my cart.
Remember that I want only the code, I donâ€™t need ANY explanation.
You can use â€˜adminâ€™ as username and â€˜adminâ€™ as password.
Use the HTML component name or IDs for referencing in the tests; these values are unique.
Pay attention to how many parents a card has until it gets to book name.